---

- name: Move to Infrastructure Project
  shell: oc project {{ oc_infra_project }}
  changed_when: False

- name: Login (user)
  shell: >
    oc login {{ oc_master_url }} -u {{ oc_user }} -p {{ oc_user_password }}
    --insecure-skip-tls-verify=true
  changed_when: False

# Infrastructure claims

- name: Check Infrastructure PVCs (dyanmic)
  shell: oc get pvc
  register: i_pvc_result
  changed_when: False

- name: Create Infrastructure PVCs (dynamic)
  shell: >
    oc process
    -p STORAGE_CLASS={{ oc_infra_volume_storage_class }}
    -p POSTGRESQL_VOLUME_SIZE={{ oc_postgresql_volume_size }}
    -p RABBITMQ_VOLUME_SIZE={{ rabbitmq_volume_size }}
    -f {{ role_path }}/files/infra-pvc-dynamic.yaml
    | oc create -f -
  when: not i_pvc_result.stdout | regex_search('^rabbitmq-claim\s', multiline=True)

- name: Create Backup PVCs (dynamic)
  shell: >
    oc process
    -p POSTGRESQL_BACKUP_VOLUME_SIZE={{ oc_infra_backup_volume_size }}
    -f {{ role_path }}/files/infra-backup-pvc-dynamic.yaml
    | oc create -f -
  when:
  - oc_infra_backup_hourly_count|int > 0
  - not i_pvc_result.stdout | regex_search('^postgresql-backup-claim\s', multiline=True)

# Wait for claims to become bound...

- name: Wait for PVCs to become Bound (dynamic)
  shell: >
    oc get pvc/{{ item }} | grep Bound
  delay: 15
  retries: "{{ (pvc_bind_timeout | int / 15) | int }}"
  register: result
  until: result.rc == 0
  loop:
  - postgresql-claim
  - rabbitmq-claim
  when: not i_pvc_result.stdout | regex_search('^rabbitmq-claim\s', multiline=True)

- name: Wait for Backup PVCs to become Bound (dynamic)
  shell: >
    oc get pvc/{{ item }} | grep Bound
  delay: 15
  retries: "{{ (pvc_bind_timeout | int / 15) | int }}"
  register: result
  until: result.rc == 0
  loop:
  - postgresql-backup-claim
  when:
  - oc_infra_backup_hourly_count|int > 0
  - not i_pvc_result.stdout | regex_search('^rabbitmq-claim\s', multiline=True)
